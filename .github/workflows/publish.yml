name: Publish QPM Package

env:
  module_id: hollywood
  qmodName: hollywood
  cache-name: hollywood_cache

on:
  push:
    tags:
      - "v*"

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        name: Checkout
        with:
          submodules: true
          lfs: true

      - uses: seanmiddleditch/gha-setup-ninja@v3

      - name: Create ndkpath.txt
        run: |
          echo "$ANDROID_NDK_LATEST_HOME" > ${GITHUB_WORKSPACE}/ndkpath.txt
          cat ${GITHUB_WORKSPACE}/ndkpath.txt

      - id: release_data
        if: contains(matrix.cargo-arg, 'ndk')
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: ${{ github.repository }}

      - name: QPM Rust Action
        uses: Fernthedev/qpm-rust-action@main
        with:
          #required
          workflow_token: ${{secrets.GITHUB_TOKEN}}

          restore: true # will run restore on download
          cache: true #will cache dependencies

          publish: false # Will publish the package at the end of the action run
          version: "${{ steps.release_data.outputs.release }}" # defaults to qpm-rust version, do not include v

      - name: List Post Restore
        run: |
          echo includes:
          ls -la ${GITHUB_WORKSPACE}/extern/includes
          echo libs:
          ls -la ${GITHUB_WORKSPACE}/extern/libs
          echo cache:
          ls -la $HOME/.local/share/QPM-Rust/cache

      - name: Cache FFMPEG
        id: cache-ffmpeg
        uses: actions/cache@v3
        with:
          path: ffmpeg
          key: ${{ hashFiles('**/update_ffmpeg.py') }}

      - name: Get FFMPEG
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          cd ${GITHUB_WORKSPACE}
          pip install PyGithub
          pip install requests
          python3 ./update_ffmpeg.py

      - name: Build
        run: |
          cd ${GITHUB_WORKSPACE}
          pwsh -Command ./build.ps1
          ./QPM/qpm-rust qmod build

      - name: Create Qmod
        run: |
          pwsh -Command ./createqmod.ps1 ${{env.qmodName}}

      # Get release that was created for this tag
      - name: Get Release
        uses: octokit/request-action@v2.x
        id: get_release
        with:
          route: GET /repos/:repository/releases/tags/${{ steps.get_tag_version.outputs.TAG }}
          repository: ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Release Upload URL
        id: get_upload_url
        run: |
          url=$(echo "$response" | jq -r '.upload_url')
          echo $url
          echo "::set-output name=upload_url::$url"
        env:
          response: ${{ steps.get_release.outputs.data }}

      - name: Get Library Name
        id: libname
        run: |
          cd ./build/
          pattern="lib${module_id}*.so"
          files=( $pattern )
          echo ::set-output name=NAME::"${files[0]}"

      - name: Upload to Release
        id: upload_file_release
        uses: softprops/action-gh-release@v0.1.12
        # Needed?      if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ./build/${{ steps.libname.outputs.NAME }}
            ./build/debug/${{ steps.libname.outputs.NAME }}
            ./${{env.qmodName}}.qmod
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
